#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Standardize the results.csv to the OpenPowerlifting
# internal format.
#
import codecs
import sys
from oplcsv import Csv


def error(msg):
    print("Error: %s" % msg, file=sys.stderr)
    sys.exit(1)


def strip_whitespace(csv):
    for row in csv.rows:
        for i,x in enumerate(row):
            row[i] = x.strip().replace('  ',' ')


def assign_class(csv):
    curclass = None
    totalidx = csv.index('TotalKg')
    wtclsidx = csv.index('WeightClassKg')

    for row in csv.rows:
        if 'kg' in row[0]:
            curclass = row[0].replace('-','').replace('kg','')
        elif curclass and row[totalidx]:
            row[wtclsidx] = curclass


def assign_division(csv):
    curdiv = None
    totalidx = csv.index('TotalKg')
    dividx = csv.index('Division')

    for row in csv.rows:
        if row[0] == 'Open' or 'Sub' in row[0] or 'Juniors' in row[0] or 'Masters' in row[0]:
            curdiv = row[0]
        elif curdiv and row[totalidx]:
            row[dividx] = curdiv


def remove_non_lifter_rows(csv):
    # All lifter rows at this point, even if DQ'd, have totals given.
    totalidx = csv.index('TotalKg')

    def getbadidx(csv):
        for i,row in enumerate(csv.rows):
            if not row[totalidx]:
                return i
        return -1

    while True:
        idx = getbadidx(csv)
        if idx == -1:
            break
        del csv.rows[idx]

    if csv.rows[0][0] == 'PL.':
        del csv.rows[0]


def fixup_lift(csv, fieldname):
    idx = csv.index(fieldname)
    placeidx = csv.index('Place')

    for row in csv.rows:
        amount = row[idx]

        # Records are like: '234-w'.
        # Failed record attempts aren't marked as records.
        if amount and amount[0] != '-' and '-' in amount:
            amount = amount.split('-')[0]

        if ' ' in amount:
            amount = amount.split()[0]

        if amount == 'X' or amount == 'DSQ' or amount == 'TD':
            amount = ''

        # Special handling for disqualification due to doping.
        if amount == 'DD':
            row[placeidx] = 'DD'
            amount = ''

        row[idx] = amount


def assign_best(csv, liftname):
    idx1 = csv.index('%s1Kg' % liftname)
    idx2 = csv.index('%s2Kg' % liftname)
    idx3 = csv.index('%s3Kg' % liftname)
    bestidx = csv.index('Best%sKg' % liftname)

    def weight(str):
        try:
            return float(str)
        except ValueError:
            return 0.0

    for row in csv.rows:
        best = max(weight(row[idx1]), weight(row[idx2]), weight(row[idx3]))

        if float(best) > 0:
            row[bestidx] = str(best)


def unreverse_names(csv):
    nameidx = csv.index('Name')

    for row in csv.rows:
        parts = row[nameidx].split()

        # The last name is probably the given first name.
        fixed = [parts[-1]] + parts[:-1]
        name = ' '.join(fixed)

        name = name.replace('Jr.', 'Jr')
        name = name.replace('Sr.', 'Sr')

        row[nameidx] = name

def hunt_dq(csv):
    plidx = csv.index('Place')
    for row in csv.rows:
        if row[plidx] == '':
            row[plidx] = 'DQ'
def main(filename):
    csv = Csv()
    with codecs.open(filename, 'r', encoding="utf-8",  errors='ignore') as fd:
        csv.rows = [x.strip().replace("?","").split(',') for x in fd.readlines()]

    # Fieldnames given for the detailed spreadsheet.
    fieldnames = []
    if len(csv.rows[0]) == 22:
        fieldnames.append('Place')
        fieldnames.append('Name')
        fieldnames.append('BirthYear')
        fieldnames.append('Country')
        fieldnames.append('BodyweightKg')
        fieldnames.append('XXX_wilksfactor')
        fieldnames.append('XXX_lot')

        fieldnames.append('Squat1Kg')
        fieldnames.append('Squat2Kg')
        fieldnames.append('Squat3Kg')
        fieldnames.append('XXX_squatplace')

        fieldnames.append('Bench1Kg')
        fieldnames.append('Bench2Kg')
        fieldnames.append('Bench3Kg')
        fieldnames.append('XXX_benchplace')

        fieldnames.append('Deadlift1Kg')
        fieldnames.append('Deadlift2Kg')
        fieldnames.append('Deadlift3Kg')
        fieldnames.append('XXX_deadliftplace')

        fieldnames.append('TotalKg')
        fieldnames.append('XXX_wilks') # Recalculate anyway.
        fieldnames.append('XXX_points')

    csv.fieldnames = fieldnames

    csv.remove_column_by_name('XXX_wilksfactor')
    csv.remove_column_by_name('XXX_lot')
    csv.remove_column_by_name('XXX_squatplace')
    csv.remove_column_by_name('XXX_benchplace')
    csv.remove_column_by_name('XXX_deadliftplace')
    csv.remove_column_by_name('XXX_wilks')
    csv.remove_column_by_name('XXX_points')

    csv.insert_column(csv.index('Squat3Kg')+1, 'BestSquatKg')
    csv.insert_column(csv.index('Bench3Kg')+1, 'BestBenchKg')
    csv.insert_column(csv.index('Deadlift3Kg')+1, 'BestDeadliftKg')
    csv.append_column('WeightClassKg')
    csv.append_column('Division')

    assign_class(csv)
    assign_division(csv)
    remove_non_lifter_rows(csv)

    for x in ['Squat1Kg', 'Squat2Kg', 'Squat3Kg', 'Bench1Kg', 'Bench2Kg', 'Bench3Kg',
              'Deadlift1Kg', 'Deadlift2Kg', 'Deadlift3Kg', 'TotalKg']:
        fixup_lift(csv, x)

    for x in ['Squat', 'Bench', 'Deadlift']:
        assign_best(csv, x)

    strip_whitespace(csv)
    unreverse_names(csv)
    hunt_dq(csv)

    csv.write(sys.stdout)


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print(" Usage: %s results.csv" % sys.argv[0], file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1])
