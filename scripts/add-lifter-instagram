#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:

"""
Basic script to add an entry to `lifter-data/social-instagram.csv`
so that it remains ordered.

Usage:
    ./scripts/add-lifter-instagram --name "<name>" --instagram "<handle>"
    ./scripts/add-lifter-instagram --from-file input.csv
"""

import os
import csv
import argparse
import unicodedata
import sys

from typing import Dict, List


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-n",
        "--name",
        type=str,
        required=False,
        help="Name of the lifter"
    )

    parser.add_argument(
        "-i",
        "--instagram",
        type=str,
        required=False,
        help="Instagram handle for the athlete"
    )

    parser.add_argument(
        "-f",
        "--from-file",
        type=str,
        required=False,
        help="CSV file containing names and Instagram handles"
    )

    return parser.parse_args()


def strip_accents(value: str) -> str:
    normalised = unicodedata.normalize('NFD', value)
    encoded = normalised.encode('ascii', 'ignore')
    decoded = encoded.decode("utf-8")
    return str(decoded)


def insert_instagram_entry(current_contents: List[str], name: str, instagram: str):
    line_entry = f"{name},{instagram}\n"

    # Ignoring the header
    for index, entry in enumerate(current_contents[1:]):
        # Find the index of the comma to avoid copying strings
        comma_index = entry.index(",")
        sanitised = strip_accents(entry[:comma_index])

        if sanitised == name:
            current_contents[index + 1] = line_entry
            return

        if sanitised > name:
            # Mutating while iterating, Rust would have a fit
            current_contents.insert(index + 1, line_entry)
            return

    # No index was smaller, so just append
    current_contents.append(line_entry)


def instagram_is_not_empty(row: Dict[str, str]) -> bool:
    return row["Instagram"] != ""


def main():
    # Parse the arguments for the script
    args = parse_args()

    # Locate where this script is
    script_location = os.path.abspath(os.path.dirname(__file__))

    # Get the directory of `social-instagram.csv`
    social_instagram_path = os.path.join(
        script_location,
        "..",
        "lifter-data",
        "social-instagram.csv"
    )

    # Read the file into memory and make adjustments
    with open(social_instagram_path, "r", encoding="utf-8") as f:
        contents = f.readlines()

    # If this is a batch request, the input is a CSV file of Name,Instagram pairs.
    if args.from_file:
        with open(args.from_file, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)

            for row in filter(instagram_is_not_empty, reader):
                insert_instagram_entry(contents, row["Name"], row["Instagram"])
    else:
        if args.name is None:
            print("Missing argument --name")
            sys.exit(1)
        if args.instagram is None:
            print("Missing argument --instagram")
            sys.exit(1)

        insert_instagram_entry(contents, args.name, args.instagram)

    # Write everything back to the correct path
    with open(social_instagram_path, "w", encoding="utf-8", newline="\n") as f:
        f.writelines(contents)


if __name__ == "__main__":
    main()
