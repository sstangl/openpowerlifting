#!/usr/bin/env python3
#
# When called in a directory with an 'original.csv' file, auto-processes that file
# into 'entries.csv' and 'meet.csv' files.

import codecs
from oplcsv import Csv


def separate_original(
    input_path='original.csv',
    meet_output_path='meet.csv',
    entries_output_path='entries.csv'
):
    """Splits an OpenLifter original.csv file into entries.csv and meet.csv files."""

    # use this where the blank lines aren't supposed to
    # be in what we're reading
    def readline_skip_blank(f):
        while True:
            line = f.readline().strip()
            if line != "":
                return line

    # as above but for iterating over the file
    def inter_lines_skip_blank(f):
        for line in f:
            line = line.strip()
            if line != "":
                yield line

    def strip_dblquote(s):
        return s.replace('"', '')

    # when we write output lines, strip the existing newline
    # and explicitly write with LF
    with open(input_path, 'rt') as input_f:

        # OPL header
        _ = input_f.readline()

        # blank line, then meet.csv content
        _ = input_f.readline()

        with codecs.open(meet_output_path, 'w', encoding='utf-8') as meet_output_f:
            meet_header = strip_dblquote(readline_skip_blank(input_f))
            meet_output_f.write(f"{meet_header}\n")

            meet_data = strip_dblquote(readline_skip_blank(input_f))
            meet_output_f.write(f"{meet_data}\n")

        # blank line, then entries.csv content
        _ = input_f.readline()

        with codecs.open(entries_output_path, 'w', encoding='utf-8') as entries_output_f:
            entries_header = strip_dblquote(readline_skip_blank(input_f))
            entries_output_f.write(f"{entries_header}\n")

            for entries_data_line in inter_lines_skip_blank(input_f):
                entries_data_line = strip_dblquote(entries_data_line.strip())
                entries_output_f.write(f"{entries_data_line}\n")


def clear_quotes(s):
    return s.replace("'", "")


def mut_meet(meet_output_path='meet.csv'):

    meet_csv_obj = Csv(meet_output_path)

    # remove Formula and RuleSet
    meet_csv_obj.remove_column_by_name('Formula')
    meet_csv_obj.remove_column_by_name('RuleSet')

    # fix stray leading quote on Date
    meet_csv_obj.transform_column_values_by_name('Date', clear_quotes)

    meet_csv_obj.write_filename(meet_output_path)


def mut_entries(entries_output_path='entries.csv'):

    entries_csv_obj = Csv(entries_output_path)

    # Add BirthDate if missing, keeping it just prior to other age data.
    if 'BirthDate' not in entries_csv_obj.fieldnames:
        index = len(entries_csv_obj.fieldnames)
        if 'Age' in entries_csv_obj.fieldnames:
            index = min(index, entries_csv_obj.index('Age'))
        if 'BirthYear' in entries_csv_obj.fieldnames:
            index = min(index, entries_csv_obj.index('BirthYear'))
        entries_csv_obj.insert_column(index, 'BirthDate')

    # fix stray leading quote on BirthDate
    entries_csv_obj.transform_column_values_by_name('BirthDate', clear_quotes)

    # Remove some optional columns unused by the checker.
    entries_csv_obj.remove_column_by_name('Points')
    entries_csv_obj.remove_column_by_name('Lot')
    entries_csv_obj.remove_column_by_name('Instagram')

    # change Wraps to Raw for non-squatting entries
    eq_i = entries_csv_obj.index('Equipment')
    event_i = entries_csv_obj.index('Event')
    for row in entries_csv_obj.rows:
        if row[eq_i] == 'Wraps' and 'S' not in row[event_i]:
            row[eq_i] = 'Raw'

    entries_csv_obj.write_filename(entries_output_path)


if __name__ == '__main__':

    separate_original()
    mut_meet()
    mut_entries()
