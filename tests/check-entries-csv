#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Simple check script for entries.csv files.
# Used as part of "make check".
#
# Makes sure that:
#
# 1) All the column names are expected.
# 2) Each column's data are in expected formats for that column type.
#
import sys,os
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))) ,"scripts"))

import oplcsv
import wilks
import toml
import copy
from bisect import bisect_left

def redden(s):
    if os.name != 'nt':
        return "\033[1;31m" + s + "\033[0;m"
    else: 
        return s

def enyellow(s):
    if os.name != 'nt':
        return "\033[1;33m" + s + "\033[0;m"
    else: 
        return s

globalFilename = ''
havePrintedFilename = False
errorCount = 0
warningCount = 0

def reset_filename_state(filename):
    global globalFilename
    global havePrintedFilename
    globalFilename = filename
    havePrintedFilename = False

def print_filename_once():
    # This completely breaks the main() abstraction, but whatever.
    global havePrintedFilename
    if not havePrintedFilename:
        print(globalFilename, file=sys.stderr)
        havePrintedFilename = True

def perror(s):
    global errorCount
    errorCount += 1
    print_filename_once()
    print(' ' + redden(s), file=sys.stderr)

def pwarning(s):
    global warningCount
    warningCount += 1
    print_filename_once()
    print(' ' + enyellow(s), file=sys.stderr)


def is_int(s):
    try:
        int(s)
        return s.isdigit()
    except ValueError:
        return False

def float2(s):
    if s == '':
        return 0.0
    return float(s)


def check_column_name(s, row, csv):
    if '  ' in s:
        pwarning("Too much spacing for name: \"%s\"" % s)

    # Lifters with the same name are disambiguated by tagging them
    # with an integer preceded by the '#' character.
    if '#' in s:
        if s.count('#') != 1:
            perror("Too many '#' characters in name '%s'." % s)
        parts = s.split('#')
        if len(parts) != 2 or not is_int(parts[1]):
            perror("Variant for '%s' must be a number." % s)

        # Conduct the rest of the check pretending that the variant
        # isn't present.
        s = parts[0].rstrip()

    # Disallow " in all circumstances: we already have to allow ',
    # so just use that for quotes.
    special_legal_chars = ' \'.-'

    if 'Jr.' in s or 'JR.' in s or 'Sr.' in s or 'SR.' in s:
        perror("Junior/Senior in names must standardize on no period: \"%s\"" % s)
    if 'Esq.' in s:
        perror("Esquire must be standardized on no period: \"%s\"" % s)

    # This only works for names written in English, but that's OK for now.
    has_illegal_char = False
    for c in s:
        if not c.isalpha() and not c in special_legal_chars:
            has_illegal_char = True
            break
    if has_illegal_char:
        perror("Name contains illegal character(s): \"%s\"" % s)

    part = s.split()
    if s.upper() == s or s.lower() == s:
        perror("Name must be in proper case: \"%s\"" % s)
    elif not part[0][0].isupper():
        perror("Name must be in proper case: \"%s\"" % s)
    elif not part[-1][0].isupper() and not "d'" in part[-1] and not part[-1].startswith('de'):
        perror("Name must be in proper case: \"%s\"" % s)

    if part[-1] == 'JR' or part[-1] == 'jr' or part[-1] == 'SR' or part[-1] == 'sr':
        perror("Junior/Senior in names must be capitalized like 'Jr': \"%s\"" % s)
    elif part[0] == 'Jr' or part[0] == 'Sr': # USAPL does this.
        perror("Jr marking must be moved to end of name: \"%s\"" % s)

    # Some federations mark drug-testing using "-DT".
    if s.endswith('DT'):
        perror("Drug-testing information present in name: \"%s\"" % s)

    for p in part:
        if p[0] == "'" and p[-1] == "'":
            perror("Nicknames should be removed: \"%s\"" % s)

    if s[-4:] == ' Iii' or s[-3:] == ' Ii':
        pwarning("Fix name casing: \"%s\"" % s)


def check_column_sex(s, row, csv):
    if s != "M" and s != "F":
        perror("Unknown sex: %s" % s)


def check_column_age(s, row, csv):
    try:
        age = int(s)
        if age < 5: # USPA actually let some 8 year olds compete...
                    # Then SPF let a 7 year old.
                    # Then UPA had 6 and 5 year olds... when does this end?
            pwarning("Age unexpectedly low: %s" % s)
        if age > 100:
            pwarning("Age unexpectedly high: %s" % s)

    except ValueError:
        perror("Age is not a number: %s" % s)

def check_column_place(s, row, csv):
    # DQ = Disqualified
    # NS = No-show
    # G  = guest-lifter
    # DD = disqualified by failing a drug test
    if not s in ['DQ', 'NS', 'G', 'DD']:
        try:
            int(s)
        except ValueError:
            perror("Place is not an integer or known exception: %s" % s)


def check_column_event(s, row, csv):
    found_illegal_char = False
    found_duplicate_event = False
    for c in s:
        if not c in "SBD":
            found_illegal_char = True
        if s.count(c) >= 2:
            found_duplicate_event = True

    if 'S' in s and not 'BestSquatKg' in csv.fieldnames:
        perror("Squat event, but no BestSquatKg")
    if 'B' in s and not 'BestBenchKg' in csv.fieldnames:
        perror("Bench event, but no BestBenchKg")
    if 'D' in s and not 'BestDeadliftKg' in csv.fieldnames:
        perror("Deadlift event, but no BestDeadliftKg")

    if found_illegal_char:
        perror("Unknown event type: %s" % s)
    if found_duplicate_event:
        perror("Duplicate event: %s" % s)


def check_column_division(s, row, csv):
    if s.strip() != s or '  ' in s:
        pwarning("Too much spacing for division: \"%s\"" % s)

    if '"' in s:
        perror("Illegal use of quote in division: %s" % s)

    low = s.lower()

    if 'raw' in low or 'single' in low or 'multi' in low or 'classic' in low:
        pwarning('Division includes equipment: "%s"' % s)

    if is_int(s.split()[0]) or 'SHW' in s:
        pwarning('Division includes weight class: "%s"' % s)

    if s[-1] is '-':
        pwarning('Division ends in "-": "%s"' % s)

    if 'guest' in low and 'Place' in csv.fieldnames:
        if row[csv.index('Place')] not in ['G','DQ']:
            pwarning('Lifter should be guest (Place = "G"): %s' %
                    row[csv.index('Name')])


def check_column_equipment(s, row, csv):
    # FIXME: Straps is just for Yury Belkin for the moment. He competed single-ply.
    if not s in ['Raw', 'Wraps', 'Single-ply', 'Multi-ply', 'Straps']:
        perror("Unknown equipment value: \"%s\"" % s)


def check_lift_column(s, row, csv):
    try:
        f = float(s)
        if f == 0.0:
            perror("Field cannot be zero: %s" % s)
    except ValueError:
        perror("Invalid lift quantity: %s" % s)


def check_positive_number_column(s, row, csv):
    try:
        f = float(s)
        if f < 0.0:
            perror("Field cannot be negative: %s" % s)
        if f == 0.0:
            perror("Field cannot be zero: %s" % s)
    except ValueError:
        perror("Invalid field quantity: %s" % s)


def check_column_birthyear(s, row, csv):
    if len(s) != 4:
        perror("BirthYear must be 4 digits: '%s'" % s)
    elif not s.isdigit():
        perror("BirthYear must be digits: '%s'" % s)
    elif s[0] != '1' and s[0] != '2':
        pwarning("BirthYear looks implausible: '%s'" % s)
    else:
        if int(s) <= 1900 or int(s) >= 2014: # Needs updating now and then.
            pwarning("BirthYear looks implausible: '%s'" % s)


def check_column_weightclass(s, row, csv):
    if s[-1] is '+':
        check_positive_number_column(s[:-1], row, csv)

    ipf_men   = ['53','59','66','74','83','93','105','120','120+']
    ipf_women = ['43','47','52','57','63','72','84','84+']
    ipf_women_extra = ['30','35','40']
    ipl = ['48','52','56','60','67.5','75','82.5','90','90+','100','110','125','125+']
    rum_extra = ['44','140','140+']

    apa_extra = ['39'] # Youth.
    proraw_extra = ['70','70+','75+','80','95','110+']
    rps_extra = ['155']
    spf_extra = ['117.5','100+','67.5+']
    idfpf_extra = ['47.5', '50.5', '55.5', '58.5']
    ipf_extra = ['60+']
    old_usapl = ['145','145+']
    wnpf_extra = ['34']
    wpau_extra = ['155','155+']

    ffforce_extra = ['83+'] # Cadet division, for youth.
    parapl_extra = ['82.5+']
    new_parapl = ['49','54','59','65','72','80','88','97','107','107+','41','45','50','55','61','67','73','79','86','86+']

    classes = ipf_men + ipf_women + ipl + rum_extra + proraw_extra + \
              rps_extra + spf_extra + ipf_extra + ipf_women_extra + \
              old_usapl + ffforce_extra + wnpf_extra + apa_extra + \
              idfpf_extra + parapl_extra +wpau_extra + new_parapl

    if not s in classes:
        pwarning("Unknown weight class: %s" % s)

    try:
        f = float(s)
        if f < 30: # Nobody should weigh this little.
            pwarning("Suspiciously low weight class: %s" % s)
    except ValueError:
        pass


def check_column_bodyweightkg(s, row, csv):
    check_positive_number_column(s, row, csv)
    try:
        f = float(s)

        is_youth = False
        if 'Division' in csv.fieldnames:
            div = row[csv.index('Division')]
            if 'y' in div.lower():
                is_youth = True

        # One federation had a pre-teen division where someone weighed ~19kg.
        if (f < 19 and not is_youth) or f > 300:
            pwarning("BodyweightKg looks implausible: '%s'" % s)
    except ValueError:
        pass


def check_column_state(s, row, csv):
    if '  ' in s:
        pwarning("Too much spacing in state: \"%s\"" % s)

    for c in s:
        if not c.isalpha() and not c.isspace():
            perror("Invalid character in state: \"%s\"" % s)
            break


def check_column_tested(s, row, csv):
    if s != '' and s != 'Yes' and s != 'No':
        perror("Tested column must be blank, 'Yes', or 'No', but found: \"%s\"" % s)


def ignore_column(s, row, csv):
    pass


HeaderHandlers = {
    'Name': check_column_name,
    'InternationalName': ignore_column, # Names in their original format (e.g. Russian).
    'Sex': check_column_sex,
    'Age': check_column_age,
    'Place': check_column_place,
    'Event': check_column_event,
    'Division': check_column_division,
    'Equipment': check_column_equipment,

    # Temporary column for IPF, to be calculated as Age during compilation.
    'BirthYear': check_column_birthyear,

    # Stat columns. Only Kg is valid.
    'WeightClassKg': check_column_weightclass,
    'BodyweightKg': check_column_bodyweightkg,

    # Lift columns. Only Kg is valid.
    'BestSquatKg': check_lift_column,
    'Squat1Kg': check_lift_column,
    'Squat2Kg': check_lift_column,
    'Squat3Kg': check_lift_column,
    'Squat4Kg': check_lift_column,

    'BestBenchKg': check_lift_column,
    'Bench1Kg': check_lift_column,
    'Bench2Kg': check_lift_column,
    'Bench3Kg': check_lift_column,
    'Bench4Kg': check_lift_column,

    'BestDeadliftKg': check_lift_column,
    'Deadlift1Kg': check_lift_column,
    'Deadlift2Kg': check_lift_column,
    'Deadlift3Kg': check_lift_column,
    'Deadlift4Kg': check_lift_column,

    'TotalKg': check_positive_number_column,

    'Tested': check_column_tested,

    # Columns that we don't really care about.
    'State': check_column_state,

    # Columns that we totally ignore but aren't bad to keep around.
    'AgeClass': ignore_column,
    'Team': ignore_column,
    'Country-State': ignore_column,
    'Country': ignore_column,
    'College/University': ignore_column,
    'School': ignore_column,
    'Category': ignore_column,
}

KnownHeaders = HeaderHandlers.keys()


def check_headers(csv):
    if not 'Name' in csv.fieldnames:
        perror('There must be a Name column.')

    if not 'BodyweightKg' in csv.fieldnames and not 'WeightClassKg' in csv.fieldnames:
        perror('There must be a BodyweightKg or WeightClassKg column.')

    if not 'Sex' in csv.fieldnames:
        perror('There must be a Sex column.')

    if not 'Equipment' in csv.fieldnames:
        perror('There must be an Equipment column.')

    if not 'TotalKg' in csv.fieldnames:
        perror('There must be a TotalKg column.')

    if not 'Place' in csv.fieldnames:
        perror("There must be a Place column.")

    # Not requiring the Event header yet, although it's probably a good idea.
    #if not 'Event' in csv.fieldnames:
    #    perror('There must be an Event column.')

    for header in csv.fieldnames:
        if not header in KnownHeaders:
            perror("Unknown column header: %s" % header)

        if csv.fieldnames.count(header) > 1:
            perror("Duplicate column header: %s" % header)

        # If lift data is present, we need a corresponding 'Best' column.
        if 'Squat' in header and not 'BestSquatKg' in csv.fieldnames:
            pwarning('Squat data present, but missing BestSquatKg')
        if 'Bench' in header and not 'BestBenchKg' in csv.fieldnames:
            pwarning('Bench data present, but missing BestBenchKg')
        if 'Deadlift' in header and not 'BestDeadliftKg' in csv.fieldnames:
            pwarning('Deadlift data present, but missing BestDeadliftKg')


def check_row_name_consistency(row, csv):
    if 'Name' in csv.fieldnames:
        name = row[csv.index('Name')]
        if name is '':
            perror("Name field empty.")


# Assert that Event makes sense given the specified lifts.
def check_row_event_consistency(row, csv):
    if not 'Event' in csv.fieldnames:
        return
    if not 'TotalKg' in csv.fieldnames:
        return

    event = row[csv.index('Event')]

    if 'S' not in event:
        for i, header in enumerate(csv.fieldnames):
            if 'Squat' in header and row[i]:
                perror("Squat entered for non-squat Event. Row: %s" % row)

    if 'B' not in event:
        for i, header in enumerate(csv.fieldnames):
            if 'Bench' in header and row[i]:
                perror("Bench entered for non-bench Event. Row: %s" % row)

    if 'D' not in event:
        for i, header in enumerate(csv.fieldnames):
            if 'Deadlift' in header and row[i]:
                perror("Deadlift entered for non-deadlift Event. Row: %s" % row)

    if 'Equipment' in csv.fieldnames:
        if not 'S' in event and row[csv.index('Equipment')] == "Wraps":
            perror("Event category doesn't use wraps. Row: %s" % row)

    # Disqualified lifters must not have Totals.
    if 'Place' in csv.fieldnames:
        place = row[csv.index('Place')]

        if place in ['DQ','NS','DD'] and row[csv.index('TotalKg')]:
            perror("DQ'd lifter must not have a TotalKg. Row: %s" % row)


#Checks that athletes of the wrong sex are not in a single-sex weight class
def check_row_weightclass_sex(row,csv,weightclasses):

    if not 'Sex' in csv.fieldnames or not 'WeightClassKg' in csv.fieldnames:
        return

    ipf_men   = ['59','66','74','83','93','105','120','120+'] #No -53 as this is an IDFPF womens class
    trad_men_only = ['125','140','140+'] #No 100,110 due to SPF,USPA etc
    old_usapl_men_only = ['145','145+']
    wpau_men_only = ['155','155+']

    men_only = ipf_men+trad_men_only +old_usapl_men_only+wpau_men_only

    #No -52kg as this overlaps with a traditional weight-class
    ipf_women = ['43','47','57','63','72','84','84+']
    trad_women_only = ['90+'] #SPF has 44 & 48 kg mens classes

    women_only = ipf_women+trad_women_only


    if weightclasses and row[csv.index('WeightClassKg')] != "":

        if row[csv.index('WeightClassKg')] not in weightclasses:
            pwarning("Lifter \"%s\" sex (%s) does not match WtCls (%s)" %
                            (row[csv.index('Name')], row[csv.index('Sex')],
                             row[csv.index('WeightClassKg')]))
    else:
        if row[csv.index('Sex')] is 'M' and row[csv.index('WeightClassKg')] in women_only:
            pwarning("Lifter \"%s\" sex (%s) does not match WtCls (%s)" %
                            (row[csv.index('Name')], row[csv.index('Sex')],
                             row[csv.index('WeightClassKg')]))
        elif row[csv.index('Sex')] is 'F' and row[csv.index('WeightClassKg')] in men_only:
            pwarning("Lifter \"%s\" sex (%s) does not match WtCls (%s)" %
                            (row[csv.index('Name')], row[csv.index('Sex')],
                             row[csv.index('WeightClassKg')]))

# Women shouldn't accidentally be given male SHW classes.
# Bodyweight should match the weight class.
def check_row_weightclass_consistency(row, csv,weightclasses):
    if not 'Sex' in csv.fieldnames or not 'WeightClassKg' in csv.fieldnames:
        return

    wtcls = row[csv.index('WeightClassKg')].replace('+','')
    if not wtcls:
        return

    # No female category should be this high.
    if row[csv.index('Sex')] == 'F':
        try:
            number = float(wtcls)
            # This is probably higher than it should be because some USPA
            # meets put women in male weightclasses for no reason.
            # Made even higher thanks to the SPF.
            if number > 120:
                perror("Suspiciously high female weightclass: %s" % row[csv.index('WeightClassKg')])
        except ValueError:
            pass

    if 'BodyweightKg' in csv.fieldnames:
        bw = row[csv.index('BodyweightKg')]
        if bw:
            if '+' in row[csv.index('WeightClassKg')]:
                if float(bw) <= float(wtcls):
                    perror("Lifter \"%s\" BW (%s) does not match WtCls (%s)" %
                        (row[csv.index('Name')], row[csv.index('BodyweightKg')],
                         row[csv.index('WeightClassKg')]))
            else:
                if float(bw) > float(wtcls):
                    perror("Lifter \"%s\" BW (%s) does not match WtCls (%s)" %
                        (row[csv.index('Name')], row[csv.index('BodyweightKg')],
                         row[csv.index('WeightClassKg')]))
                elif weightclasses: #If we know the weightclasses make sure we are above the next weightclass down
                    wcs= [float(wc.replace('+','')) for wc in weightclasses]
                    #Assumes weight classes are sorted for a slight time saving
                    if float(bw) > wcs[0]:

                        next_down = max(wc for wc in wcs if wc < float(row[csv.index('WeightClassKg')]))
                        if float(bw) <= wcs[bisect_left(wcs, float(row[csv.index('WeightClassKg')]))-1]:
                            pwarning("Lifter \"%s\" BW (%s) is too light for WtCls (%s)" %
                                (row[csv.index('Name')], row[csv.index('BodyweightKg')],
                                row[csv.index('WeightClassKg')]))



    # USAPL's reporting site calculates weight class from bodyweight,
    # so if they leave bodyweight blank it will assign the lowest weight class,
    # giving the lifter a Wilks score of 1000+!
    if 'usapl/' in globalFilename and 'BodyweightKg' in csv.fieldnames:
        if row[csv.index('BodyweightKg')].strip() == '':
            if row[csv.index('WeightClassKg')].strip() != '':
                perror("WeightClass for %s must be zeroed (USAPL failed to enter bodyweight)" %
                        row[csv.index('Name')])


# Check that lifts are in ascending order.
def check_row_lift_order(row, csv, attemptcols):
    attempts = []
    for col in attemptcols:
        attempt = abs(float2(row[csv.index(col)])) if col in csv.fieldnames else 0.0
        if attempt != 0.0:
            attempts.append(attempt)

    if attempts != sorted(attempts):
        pwarning("Lifter \"%s\" has non ascending attempts: %s" %
                (row[csv.index('Name')], ''.join(str(attempts))))

    return

# Checks that lifters have not retaken succesful attempts
def check_row_success_consistency(row,csv,attemptcols):
    attempts = []
    for col in attemptcols:
        attempt = float2(row[csv.index(col)]) if col in csv.fieldnames else 0.0
        if attempt != 0.0:
            attempts.append(attempt)

    if len(attempts) <2:
        return

    for ii in range(0,len(attempts)-1):
        following_attempts = [abs(x) for x in attempts[(ii+1):]]
        attempt = attempts[ii]

        if attempts[ii] in following_attempts:
            pwarning("Lifter \"%s\" has retaken successful attempt(s): %s" %
                (row[csv.index('Name')], ''.join(str(attempts))))

    return

# Check that BestFooKg is actually the best of (Foo1Kg, Foo2Kg, Foo3Kg), if present.
def check_row_lift_consistency(row, csv, bestcol, attemptcols):
    if not bestcol in csv.fieldnames:
        return

    # If the lifter was disqualified for doping, none of the attempts count.
    if 'Place' in csv.fieldnames and row[csv.index('Place')] == 'DD':
        return

    attempts = []
    for col in attemptcols:
        attempt = float2(row[csv.index(col)]) if col in csv.fieldnames else 0.0
        attempts.append(attempt)

    best = max(attempts)

    # If attempts aren't provided, then the best column is believed.
    if best == 0:
        return

    # If the lifter bombed, the best column should be empty.
    if best < 0:
        if row[csv.index(bestcol)] != '':
            perror("Lifter \"%s\" bombed on a lift, but column %s is not empty." %
                    (row[csv.index('Name')], bestcol))
        return

    if best != float2(row[csv.index(bestcol)]):
        perror("Entry for \"%s\" in column %s does not match attempts: expected %s, got %s" %
               (row[csv.index('Name')], bestcol, str(best), row[csv.index(bestcol)]))



def check_row_total_consistency(row, csv):
    if not 'TotalKg' in csv.fieldnames:
        return

    total = float2(row[csv.index('TotalKg')])
    squat = float2(row[csv.index('BestSquatKg')]) if 'BestSquatKg' in csv.fieldnames else 0
    bench = float2(row[csv.index('BestBenchKg')]) if 'BestBenchKg' in csv.fieldnames else 0
    deadl = float2(row[csv.index('BestDeadliftKg')]) if 'BestDeadliftKg' in csv.fieldnames else 0

    # Disqualified, didn't finish the meet, etc.
    if total <= 0: # Should be zero.
        if 'Place' in csv.fieldnames:
            place = row[csv.index('Place')]
            if place != 'DQ' and place != 'DD' and place != 'NS':
                pwarning("Lifter has no total, but not marked DQ: \"%s\"" %
                         row[csv.index('Name')])
        return

    # Federation only reported partial data -- SBD, but only B data.
    if 'Event' in csv.fieldnames:
        event = row[csv.index('Event')]
        if 'S' in event and squat == 0:
            return
        if 'B' in event and bench == 0:
            return
        if 'D' in event and deadl == 0:
            return

    # Most federations round to 0.01, so rounding errors get introduced.
    # Only flag the ones that are obviously wrong, otherwise, believe the federation.
    if squat + bench + deadl == 0:
        return # Ignore that one RUPC meet that forgot to record what people lifted.
    if abs(squat + bench + deadl - total) > 0.5:
        perror("Total error: Calculated %f, but meet says %f" % (squat+bench+deadl, total))
        perror(" For row: %s" % row)

def check_row_division(row,csv,divisions,meetyear):

    if not 'Division' in csv.fieldnames:
        return

    for div_key in divisions:
        div = divisions[div_key]
        if row[csv.index('Division')] == div["name"]:
            if 'BirthYear' in csv.fieldnames and row[csv.index('BirthYear')].isdigit():
                approxage = meetyear-int(row[csv.index('BirthYear')])
                if approxage > int(div["max"]):
                    pwarning("Lifter \"%s\" is too old(~%s) for division: %s" %
                            (row[csv.index('Name')],approxage,row[csv.index('Division')] ))
                elif approxage < int(div["min"]):
                    pwarning("Lifter \"%s\" is too young(~%s) for division: %s" %
                            (row[csv.index('Name')],approxage,row[csv.index('Division')] ))

            elif 'Age' in csv.fieldnames and row[csv.index('Age')].isdigit():
                if int(row[csv.index('Age')]) > div["max"]:
                    pwarning("Lifter \"%s\" is too old(%s) for division: %s" %
                            (row[csv.index('Name')],row[csv.index('Age')],row[csv.index('Division')] ))
                elif int(row[csv.index('Age')]) < div["min"]:
                    pwarning("Lifter \"%s\" is too young(%s) for division: %s" %
                            (row[csv.index('Name')],row[csv.index('Age')],row[csv.index('Division')] ))

            
            return



    pwarning("Lifter \"%s\" has an unknown division: %s" %
            (row[csv.index('Name')],row[csv.index('Division')] ))



def check_row(row, csv,configtoml,meet_date,meet_id):
    check_row_name_consistency(row, csv)
    check_row_event_consistency(row, csv)


    if configtoml and meet_date: #Then we actually have a config file


        weight_classes = None

        meet_year = int(meet_date.split('-')[0])


        #Now find the correct weightclass group based on sex and division
        if 'Sex' in csv.fieldnames and row[csv.index('Sex')]: #Need a sex to get the right weightclasses
            for wc_key in configtoml["weightclasses"]:
                wc_rule = configtoml["weightclasses"][wc_key]

                if 'Division' in csv.fieldnames and row[csv.index('Division')]: #Use the division if we have one
                    if meet_date >= wc_rule["date_range"][0] and meet_date <= wc_rule["date_range"][1]: #Check the dates line up
                        if ("sex" in wc_rule and row[csv.index('Sex')] == wc_rule["sex"]) or "sex" not in wc_rule: #Check the sex lines up
                            if "divisions" in wc_rule and row[csv.index('Division')]:
                                weight_classes = wc_rule["classes"]
                            elif "divisions" not in wc_rule and weight_classes == None: #This is a default, rule use it only if we haven't found other rules
                                weight_classes = wc_rule["classes"]


                elif "divisions" not in wc_rule: #Otherwise use default
                    if meet_date >= wc_rule["date_range"][0] and meet_date <= wc_rule["date_range"][1]: #Check the dates line up
                        if ("sex" in wc_rule and row[csv.index('Sex')] == wc_rule["sex"]) or "sex" not in wc_rule: #Check the sex lines up               
                            weight_classes = wc_rule["classes"]


        if meet_id in configtoml["exclusions"]:
            if "check_row_weightclass_sex" not in configtoml["exclusions"][meet_id]:
                check_row_weightclass_sex(row,csv,weight_classes)
            if "check_row_division" not in configtoml["exclusions"][meet_id]:
                check_row_division(row,csv,configtoml["divisions"],meet_year)
            if "check_row_weightclass_consistency" not in configtoml["exclusions"][meet_id]:
                check_row_weightclass_consistency(row, csv,weight_classes)
        else:
            check_row_weightclass_sex(row,csv,weight_classes)
            check_row_division(row,csv,configtoml["divisions"],meet_year)
            check_row_weightclass_consistency(row, csv,weight_classes)



    else: #Run the default tests
        check_row_weightclass_sex(row,csv,None)
        check_row_weightclass_consistency(row, csv,None)


    check_row_total_consistency(row, csv)

    check_row_lift_consistency(row, csv, 'BestSquatKg', ['Squat1Kg','Squat2Kg','Squat3Kg'])
    check_row_lift_consistency(row, csv, 'BestBenchKg', ['Bench1Kg','Bench2Kg','Bench3Kg'])
    check_row_lift_consistency(row, csv, 'BestDeadliftKg',
                                          ['Deadlift1Kg','Deadlift2Kg','Deadlift3Kg'])

    check_row_lift_order(row, csv,['Squat1Kg','Squat2Kg','Squat3Kg','Squat4Kg'])
    check_row_lift_order(row, csv,['Bench1Kg','Bench2Kg','Bench3Kg','Bench4Kg'])
    check_row_lift_order(row, csv,['Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','Deadlift4Kg'])

    check_row_success_consistency(row, csv,['Squat1Kg','Squat2Kg','Squat3Kg','Squat4Kg'])
    check_row_success_consistency(row, csv,['Bench1Kg','Bench2Kg','Bench3Kg','Bench4Kg'])
    check_row_success_consistency(row, csv,['Deadlift1Kg','Deadlift2Kg','Deadlift3Kg','Deadlift4Kg'])


    # Check individual cell values in isolation.
    for i, text in enumerate(row):
        if text.strip() != text:
            perror("Extraneous whitespace for %s in row %s" % (text, ','.join(row)))

        if text and csv.fieldnames[i] in KnownHeaders:
            HeaderHandlers[csv.fieldnames[i]](text, row, csv)

    # Sex may not be missing.
    if 'Sex' in csv.fieldnames and not row[csv.index('Sex')]:
        perror("Missing sex: %s" % ','.join(row))

    # Equipment may not be missing.
    if 'Equipment' in csv.fieldnames and not row[csv.index('Equipment')]:
        perror("Missing equipment: %s" % ','.join(row))

    if not row[csv.index('Name')]:
        perror("Missing name: %s" % ','.join(row))



def check(scriptname, filename,configtoml,meetpath):
    # Pretty-printer helper (so we only print the name once).
    reset_filename_state(filename)

    csv = oplcsv.Csv(filename)

    meet_id = os.path.basename(os.path.dirname(filename))
    meet_date = None

    check_headers(csv)

    if meetpath != '':
        meet = oplcsv.Csv(meetpath)
        #Make sure that we have a proper date
        if len(meet.rows) ==1 and "Date" in meet.fieldnames:
            meet_date = meet.rows[0][meet.index("Date")]
            if meet_date.count('-') != 2 or not meet_date.replace('-','').isdigit():
                meet_date = None



    for row in csv.rows:
        if len(row) != len(csv.fieldnames):
            perror("Column count mismatch for row: %s" % ','.join(row))
            continue
    
        check_row(row, csv,configtoml,meet_date,meet_id)


if __name__ == '__main__':
    # If arguments are provided, check only those files.
    if len(sys.argv) > 1:
        for f in sys.argv[1:]:
            check(sys.argv[0], f,None,None) #Need to think of a good syntax for passing config files

    # Otherwise, check every file named entries.csv in the dirtree,
    # which is much faster than using `find -exec`.
    else:
        configpath = ''
        configtoml = None
        configfile = None
        for dirname, subdirs, files in os.walk(os.getcwd()):
            if configpath and os.path.dirname(configpath) not in dirname:
            	configpath = ''
            	configfile.close()
            	configtoml = None
            	configfile = None


            if 'CONFIG.toml' in files:
                configpath =dirname+os.sep+'CONFIG.toml'
                configfile = open(configpath, 'r',encoding='utf-8')
                configtoml = toml.load(configfile)

            if 'entries.csv' in files:
                entriespath = dirname + os.sep + 'entries.csv'

                if 'meet.csv' in files:
                    meetpath = dirname + os.sep + 'meet.csv'

                check(sys.argv[0], entriespath,configtoml,meetpath)

                if not 'meet.csv' in files:
                    perror('Missing meet.csv')
        

        if configfile != None:
            configfile.close()        

    print("Summary: %u errors, %u warnings." % (errorCount, warningCount))
    if errorCount > 0:
        sys.exit(1)
