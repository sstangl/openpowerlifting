#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Simple check script for lifters.csv files.
# Used as part of "make check".
#
# Makes sure that:
#
# 1) All the column names are expected.
# 2) Each column's data are in expected formats for that column type.
#

import oplcsv
import os
import sys
import wilks

def redden(s):
    return "\033[1;31m" + s + "\033[0;m"

def enyellow(s):
    return "\033[1;33m" + s + "\033[0;m"

globalFilename = ''
havePrintedFilename = False
errorCount = 0
warningCount = 0

def reset_filename_state(filename):
    global globalFilename
    global havePrintedFilename
    globalFilename = filename
    havePrintedFilename = False

def print_filename_once():
    # This completely breaks the main() abstraction, but whatever.
    global havePrintedFilename
    if not havePrintedFilename:
        print(globalFilename, file=sys.stderr)
        havePrintedFilename = True

def perror(s):
    global errorCount
    errorCount += 1
    print_filename_once()
    print(' ' + redden(s), file=sys.stderr)

def pwarning(s):
    global warningCount
    warningCount += 1
    print_filename_once()
    print(' ' + enyellow(s), file=sys.stderr)


def is_int(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

def float2(s):
    if s == '':
        return 0.0
    return float(s)


def check_column_name(s, row, csv):
    if '  ' in s:
        pwarning("Too much spacing for name: \"%s\"" % s)

    # Disallow " in all circumstances: we already have to allow ',
    # so just use that for quotes.
    special_legal_chars = ' \'.-'

    if 'Jr.' in s or 'JR.' in s or 'Sr.' in s or 'SR.' in s:
        perror("Junior/Senior in names must standardize on no period: \"%s\"" % s)
    if 'Esq.' in s:
        perror("Esquire must be standardized on no period: \"%s\"" % s)

    # This only works for names written in English, but that's OK for now.
    has_illegal_char = False
    for c in s:
        if not c.isalpha() and not c in special_legal_chars:
            has_illegal_char = True
            break
    if has_illegal_char:
        perror("Name contains illegal character(s): \"%s\"" % s)

    part = s.split()
    if s.upper() == s or s.lower() == s:
        perror("Name must be in proper case: \"%s\"" % s)
    elif not part[0][0].isupper():
        perror("Name must be in proper case: \"%s\"" % s)
    elif not part[-1][0].isupper() and not "d'" in part[-1] and not part[-1].startswith('de'):
        perror("Name must be in proper case: \"%s\"" % s)

    if part[-1] == 'JR' or part[-1] == 'jr' or part[-1] == 'SR' or part[-1] == 'sr':
        perror("Junior/Senior in names must be capitalized like 'Jr': \"%s\"" % s)
    elif part[0] == 'Jr' or part[0] == 'Sr': # USAPL does this.
        perror("Jr marking must be moved to end of name: \"%s\"" % s)

    # Some federations mark drug-testing using "-DT".
    if s.endswith('DT'):
        perror("Drug-testing information present in name: \"%s\"" % s)

    for p in part:
        if p[0] == "'" and p[-1] == "'":
            perror("Nicknames should be removed: \"%s\"" % s)

    if s[-4:] == ' Iii' or s[-3:] == ' Ii':
        pwarning("Fix name casing: \"%s\"" % s)


def check_column_sex(s, row, csv):
    if s != "M" and s != "F":
        perror("Unknown sex: %s" % s)


def check_column_age(s, row, csv):
    try:
        age = int(s)
        if age < 5: # USPA actually let some 8 year olds compete...
                    # Then SPF let a 7 year old.
                    # Then UPA had 6 and 5 year olds... when does this end?
            pwarning("Age unexpectedly low: %s" % s)
        if age > 100:
            pwarning("Age unexpectedly high: %s" % s)

    except ValueError:
        perror("Age is not a number: %s" % s)


def check_column_place(s, row, csv):
    # DQ = Disqualified
    # NS = No-show
    # G  = guest-lifter
    # DD = disqualified by failing a drug test
    if not s in ['DQ', 'NS', 'G', 'DD']:
        try:
            int(s)
        except ValueError:
            perror("Place is not an integer or known exception: %s" % s)


def check_column_event(s, row, csv):
    found_illegal_char = False
    for c in s:
        if not c in "SBD":
            found_illegal_char = True

        if "SBD".count(c) >= 2:
            perror("Duplicate event character: %s" % s)

    if 'S' in s and not 'BestSquatKg' in csv.fieldnames:
        perror("Squat event, but no BestSquatKg")
    if 'B' in s and not 'BestBenchKg' in csv.fieldnames:
        perror("Bench event, but no BestBenchKg")
    if 'D' in s and not 'BestDeadliftKg' in csv.fieldnames:
        perror("Deadlift event, but no BestDeadliftKg")

    if found_illegal_char:
        perror("Unknown event type: %s" % s)


def check_column_division(s, row, csv):
    if s.strip() != s or '  ' in s:
        pwarning("Too much spacing for division: \"%s\"" % s)

    if '"' in s:
        perror("Illegal use of quote in division: %s" % s)

    low = s.lower()

    if 'raw' in low or 'single' in low or 'multi' in low or 'classic' in low:
        pwarning('Division includes equipment: "%s"' % s)

    if is_int(s.split()[0]) or 'SHW' in s:
        pwarning('Division includes weight class: "%s"' % s)

    if s[-1] is '-':
        pwarning('Division ends in "-": "%s"' % s)

    if 'guest' in low and 'Place' in csv.fieldnames:
        if row[csv.index('Place')] not in ['G','DQ']:
            pwarning('Lifter should be guest (Place = "G"): %s' %
                    row[csv.index('Name')])


def check_column_equipment(s, row, csv):
    # FIXME: Straps is just for Yury Belkin for the moment. He competed single-ply.
    if not s in ['Raw', 'Wraps', 'Single-ply', 'Multi-ply', 'Straps']:
        perror("Unknown equipment value: \"%s\"" % s)


def check_lift_column(s, row, csv):
    try:
        f = float(s)
        if f == 0.0:
            perror("Field cannot be zero: %s" % s)
    except ValueError:
        perror("Invalid lift quantity: %s" % s)


def check_positive_number_column(s, row, csv):
    try:
        f = float(s)
        if f < 0.0:
            perror("Field cannot be negative: %s" % s)
        if f == 0.0:
            perror("Field cannot be zero: %s" % s)
    except ValueError:
        perror("Invalid field quantity: %s" % s)


def check_column_birthyear(s, row, csv):
    if len(s) != 4:
        perror("BirthYear must be 4 digits: '%s'" % s)
    elif not s.isdigit():
        perror("BirthYear must be digits: '%s'" % s)
    elif s[0] != '1' and s[0] != '2':
        pwarning("BirthYear looks implausible: '%s'" % s)
    else:
        if int(s) <= 1900 or int(s) >= 2014: # Needs updating now and then.
            pwarning("BirthYear looks implausible: '%s'" % s)


def check_column_weightclass(s, row, csv):
    if s[-1] is '+':
        check_positive_number_column(s[:-1], row, csv)

    ipf_men   = ['53','59','66','74','83','93','105','120','120+']
    ipf_women = ['43','47','52','57','63','72','84','84+']
    ipf_women_extra = ['30','35','40']
    ipl = ['48','52','56','60','67.5','75','82.5','90','90+','100','110','125','125+']
    rum_extra = ['44','140','140+']

    proraw_extra = ['70','70+','75+','80','95','110+']
    rps_extra = ['155']
    spf_extra = ['117.5','100+','67.5+']
    ipf_extra = ['60+']
    old_usapl = ['145','145+']

    ffforce_extra = ['83+'] # Cadet division.

    classes = ipf_men + ipf_women + ipl + rum_extra + proraw_extra + \
              rps_extra + spf_extra + ipf_extra + ipf_women_extra + \
              old_usapl + ffforce_extra

    if not s in classes:
        pwarning("Unknown weight class: %s" % s)

    try:
        f = float(s)
        if f < 30: # Nobody should weigh this little.
            pwarning("Suspiciously low weight class: %s" % s)
    except ValueError:
        pass


def check_column_bodyweightkg(s, row, csv):
    check_positive_number_column(s, row, csv)
    try:
        f = float(s)
        # One federation had a pre-teen division where someone weighed ~19kg.
        if f < 19 or f > 300:
            pwarning("BodyweightKg looks implausible: '%s'" % s)
    except ValueError:
        pass


def check_column_state(s, row, csv):
    if '  ' in s:
        pwarning("Too much spacing in state: \"%s\"" % s)

    for c in s:
        if not c.isalpha() and not c.isspace():
            perror("Invalid character in state: \"%s\"" % s)
            break

def ignore_column(s, row, csv):
    pass


HeaderHandlers = {
    'Name': check_column_name,
    'InternationalName': ignore_column, # Names in their original format (e.g. Russian).
    'Sex': check_column_sex,
    'Age': check_column_age,
    'Place': check_column_place,
    'Event': check_column_event,
    'Division': check_column_division,
    'Equipment': check_column_equipment,

    # Temporary column for IPF, to be calculated as Age during compilation.
    'BirthYear': check_column_birthyear,

    # Stat columns. Only Kg is valid.
    'WeightClassKg': check_column_weightclass,
    'BodyweightKg': check_column_bodyweightkg,
    'Wilks': check_positive_number_column,

    # Lift columns. Only Kg is valid.
    'BestSquatKg': check_lift_column,
    'Squat1Kg': check_lift_column,
    'Squat2Kg': check_lift_column,
    'Squat3Kg': check_lift_column,
    'Squat4Kg': check_lift_column,

    'BestBenchKg': check_lift_column,
    'Bench1Kg': check_lift_column,
    'Bench2Kg': check_lift_column,
    'Bench3Kg': check_lift_column,
    'Bench4Kg': check_lift_column,

    'BestDeadliftKg': check_lift_column,
    'Deadlift1Kg': check_lift_column,
    'Deadlift2Kg': check_lift_column,
    'Deadlift3Kg': check_lift_column,
    'Deadlift4Kg': check_lift_column,

    'TotalKg': check_positive_number_column,

    # Columns that we don't really care about.
    'State': check_column_state,

    # Columns that we totally ignore but aren't bad to keep around.
    'Team': ignore_column,
    'Country-State': ignore_column,
    'Country': ignore_column,
    'College/University': ignore_column,
    'School': ignore_column,
    'Category': ignore_column,
}

KnownHeaders = HeaderHandlers.keys()


def check_headers(csv):
    if not 'Name' in csv.fieldnames:
        perror('There must be a Name column.')

    if not 'BodyweightKg' in csv.fieldnames and not 'WeightClassKg' in csv.fieldnames:
        perror('There must be a BodyweightKg or WeightClassKg column.')

    if not 'Sex' in csv.fieldnames:
        perror('There must be a Sex column.')

    if not 'Equipment' in csv.fieldnames:
        perror('There must be an Equipment column.')

    if not 'TotalKg' in csv.fieldnames:
        perror('There must be a TotalKg column.')

    if not 'Place' in csv.fieldnames:
        perror("There must be a Place column.")

    if 'Wilks' in csv.fieldnames and not 'TotalKg' in csv.fieldnames:
        perror('Wilks requires a TotalKg column.')
    if 'Wilks' in csv.fieldnames and not 'BodyweightKg' in csv.fieldnames:
        perror('Wilks requires a BodyweightKg for exact bodyweight.')

    # Not requiring the Event header yet, although it's probably a good idea.
    #if not 'Event' in csv.fieldnames:
    #    perror('There must be an Event column.')

    for header in csv.fieldnames:
        if not header in KnownHeaders:
            perror("Unknown column header: %s" % header)

        if csv.fieldnames.count(header) > 1:
            perror("Duplicate column header: %s" % header)

        # If lift data is present, we need a corresponding 'Best' column.
        if 'Squat' in header and not 'BestSquatKg' in csv.fieldnames:
            pwarning('Squat data present, but missing BestSquatKg')
        if 'Bench' in header and not 'BestBenchKg' in csv.fieldnames:
            pwarning('Bench data present, but missing BestBenchKg')
        if 'Deadlift' in header and not 'BestDeadliftKg' in csv.fieldnames:
            pwarning('Deadlift data present, but missing BestDeadliftKg')


def check_row_name_consistency(row, csv):
    if 'Name' in csv.fieldnames:
        name = row[csv.index('Name')]
        if name is '':
            perror("Name field empty.")


# Assert that Event makes sense given the specified lifts.
def check_row_event_consistency(row, csv):
    if not 'Event' in csv.fieldnames:
        return
    if not 'TotalKg' in csv.fieldnames:
        return

    event = row[csv.index('Event')]

    if 'S' not in event:
        for i, header in enumerate(csv.fieldnames):
            if 'Squat' in header and row[i]:
                perror("Squat entered for non-squat Event. Row: %s" % row)

    if 'B' not in event:
        for i, header in enumerate(csv.fieldnames):
            if 'Bench' in header and row[i]:
                perror("Bench entered for non-bench Event. Row: %s" % row)

    if 'D' not in event:
        for i, header in enumerate(csv.fieldnames):
            if 'Deadlift' in header and row[i]:
                perror("Deadlift entered for non-deadlift Event. Row: %s" % row)

    if 'Equipment' in csv.fieldnames:
        if not 'S' in event and row[csv.index('Equipment')] == "Wraps":
            perror("Event category doesn't use wraps. Row: %s" % row)

    # Disqualified lifters must not have Totals.
    if 'Place' in csv.fieldnames:
        place = row[csv.index('Place')]

        if place in ['DQ','NS','DD'] and row[csv.index('TotalKg')]:
            perror("DQ'd lifter must not have a TotalKg. Row: %s" % row)


# Women shouldn't accidentally be given male SHW classes.
# Bodyweight should match the weight class.
def check_row_weightclass_consistency(row, csv):
    if not 'Sex' in csv.fieldnames or not 'WeightClassKg' in csv.fieldnames:
        return

    if row[csv.index('Sex')] is not 'F':
        return

    wtcls = row[csv.index('WeightClassKg')].replace('+','')
    if not wtcls:
        return

    # No female category should be this high.
    try:
        number = float(wtcls)
        # This is probably higher than it should be because some USPA
        # meets put women in male weightclasses for no reason.
        # Made even higher thanks to the SPF.
        if number > 120:
            pwarning("Suspiciously high female weightclass: %s" % row[csv.index('WeightClassKg')])
    except ValueError:
        pass

    if 'BodyweightKg' in csv.fieldnames:
        bw = row[csv.index('BodyweightKg')]
        if bw:
            if '+' in row[csv.index('WeightClassKg')]:
                if float(bw) <= float(wtcls):
                    perror("Lifter \"%s\" BW (%s) does not match WtCls (%s)" %
                        (row[csv.index('Name')], row[csv.index('BodyweightKg')],
                         row[csv.index('WeightClassKg')]))
            else:
                if float(bw) > float(wtcls):
                    perror("Lifter \"%s\" BW (%s) does not match WtCls (%s)" %
                        (row[csv.index('Name')], row[csv.index('BodyweightKg')],
                         row[csv.index('WeightClassKg')]))

    # USAPL's reporting site calculates weight class from bodyweight,
    # so if they leave bodyweight blank it will assign the lowest weight class,
    # giving the lifter a Wilks score of 1000+!
    if 'usapl' in globalFilename and 'BodyweightKg' in csv.fieldnames:
        if row[csv.index('BodyweightKg')].strip() == '':
            if row[csv.index('WeightClassKg')].strip() != '':
                perror("WeightClass for %s must be zeroed (USAPL failed to enter bodyweight)" %
                        row[csv.index('Name')])


# Check that BestFooKg is actually the best of (Foo1Kg, Foo2Kg, Foo3Kg), if present.
def check_row_lift_consistency(row, csv, bestcol, attemptcols):
    if not bestcol in csv.fieldnames:
        return

    # If the lifter was disqualified for doping, none of the attempts count.
    if 'Place' in csv.fieldnames and row[csv.index('Place')] == 'DD':
        return

    attempts = []
    for col in attemptcols:
        attempt = float2(row[csv.index(col)]) if col in csv.fieldnames else 0.0
        attempts.append(attempt)

    best = max(attempts)

    # If attempts aren't provided, then the best column is believed.
    if best == 0:
        return

    # If the lifter bombed, the best column should be empty.
    if best < 0:
        if row[csv.index(bestcol)] != '':
            perror("Lifter \"%s\" bombed on a lift, but column %s is not empty." %
                    (row[csv.index('Name')], bestcol))
        return

    if best != float2(row[csv.index(bestcol)]):
        perror("Entry for \"%s\" in column %s does not match attempts: expected %s, got %s" %
               (row[csv.index('Name')], bestcol, str(best), row[csv.index(bestcol)]))



def check_row_total_consistency(row, csv):
    if not 'TotalKg' in csv.fieldnames:
        return

    total = float2(row[csv.index('TotalKg')])
    squat = float2(row[csv.index('BestSquatKg')]) if 'BestSquatKg' in csv.fieldnames else 0
    bench = float2(row[csv.index('BestBenchKg')]) if 'BestBenchKg' in csv.fieldnames else 0
    deadl = float2(row[csv.index('BestDeadliftKg')]) if 'BestDeadliftKg' in csv.fieldnames else 0

    # Disqualified, didn't finish the meet, etc.
    if total <= 0: # Should be zero.
        if 'Place' in csv.fieldnames:
            place = row[csv.index('Place')]
            if place != 'DQ' and place != 'DD' and place != 'NS':
                pwarning("Lifter has no total, but not marked DQ: \"%s\"" %
                         row[csv.index('Name')])
        return

    # Most federations round to 0.01, so rounding errors get introduced.
    # Only flag the ones that are obviously wrong, otherwise, believe the federation.
    if squat + bench + deadl == 0:
        return # Ignore that one RUPC meet that forgot to record what people lifted.
    if abs(squat + bench + deadl - total) > 0.5:
        perror("Total error: Calculated %f, but meet says %f" % (squat+bench+deadl, total))
        perror(" For row: %s" % row)


# Federations calculate Wilks themselves, but have errors.
# From stupid things like using the wrong units.
def check_row_wilks_consistency(row, csv):
    if not 'Wilks' in csv.fieldnames:
        return
    if not 'BodyweightKg' in csv.fieldnames:
        return
    if not 'TotalKg' in csv.fieldnames:
        return
    if not 'Sex' in csv.fieldnames:
        return

    total = float2(row[csv.index('TotalKg')])
    bodyweight = float2(row[csv.index('BodyweightKg')])
    sex = row[csv.index('Sex')]
    score = float2(row[csv.index('Wilks')])

    if score > 0:
        if total <= 0:
            perror("Wilks given but missing TotalKg in row.")
        if bodyweight <= 0:
            perror("Wilks given but missing BodyweightKg in row.")
        if sex == '':
            perror("Wilks given but missing Sex in row.")

    if total <= 0 or bodyweight <= 0 or sex == '' or score <= 0:
        return

    calculated_score = wilks.wilks(sex == 'M', bodyweight, total)

    # Federations induce a lot of rounding error, so believe them unless
    # it's pretty egregiously wrong.
    if abs(calculated_score - score) > 0.5:
        perror("Wilks error: Calculated %f, but meet says %f" % (calculated_score, score))


def check_row(row, csv):
    check_row_name_consistency(row, csv)
    check_row_event_consistency(row, csv)
    check_row_weightclass_consistency(row, csv)
    check_row_total_consistency(row, csv)
    check_row_wilks_consistency(row, csv)

    check_row_lift_consistency(row, csv, 'BestSquatKg', ['Squat1Kg','Squat2Kg','Squat3Kg'])
    check_row_lift_consistency(row, csv, 'BestBenchKg', ['Bench1Kg','Bench2Kg','Bench3Kg'])
    check_row_lift_consistency(row, csv, 'BestDeadliftKg',
                                          ['Deadlift1Kg','Deadlift2Kg','Deadlift3Kg'])

    # Check individual cell values in isolation.
    for i, text in enumerate(row):
        if text.strip() != text:
            perror("Extraneous whitespace for %s in row %s" % (text, ','.join(row)))

        if text and csv.fieldnames[i] in KnownHeaders:
            HeaderHandlers[csv.fieldnames[i]](text, row, csv)

    # Sex may not be missing.
    if 'Sex' in csv.fieldnames and not row[csv.index('Sex')]:
        perror("Missing sex: %s" % ','.join(row))

    if not row[csv.index('Name')]:
        perror("Missing name: %s" % ','.join(row))



def check(scriptname, filename):
    # Pretty-printer helper (so we only print the name once).
    reset_filename_state(filename)

    csv = oplcsv.Csv(filename)

    check_headers(csv)

    for row in csv.rows:
        if len(row) != len(csv.fieldnames):
            perror("Column count mismatch for row: %s" % ','.join(row))
            continue

        check_row(row, csv)


if __name__ == '__main__':
    # If arguments are provided, check only those files.
    if len(sys.argv) > 1:
        for f in sys.argv[1:]:
            check(sys.argv[0], f)

    # Otherwise, check every file named lifters.csv in the dirtree,
    # which is much faster than using `find -exec`.
    else:
        for dirname, subdirs, files in os.walk(os.getcwd()):
            if 'lifters.csv' in files:
                lifterspath = dirname + os.sep + 'lifters.csv'
                check(sys.argv[0], lifterspath)

                if not 'meet.csv' in files:
                    perror('Missing meet.csv')

    print("Summary: %u errors, %u warnings." % (errorCount, warningCount))

    if errorCount > 0:
        sys.exit(1)
