#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Simple check script for meet.csv files.
# Used as part of "make check".
#
# Makes sure that:
#
# 1) All the column data is in the pre-set format.
#
import datetime
import sys,os
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))) ,"scripts"))

import oplcsv

def redden(s):
    if os.name != 'nt':
        return "\033[1;31m" + s + "\033[0;m"
    else: 
        return s

def enyellow(s):
    if os.name != 'nt':
        return "\033[1;33m" + s + "\033[0;m"
    else: 
        return s

globalFilename = ''
havePrintedFilename = False
hitError = False  # Determines return value at end.
currentYear = int(datetime.datetime.now().strftime("%Y"))

def reset_filename_state(filename):
    global globalFilename
    global havePrintedFilename
    globalFilename = filename
    havePrintedFilename = False

def print_filename_once():
    # This completely breaks the main() abstraction, but whatever.
    global havePrintedFilename
    if not havePrintedFilename:
        print(globalFilename, file=sys.stderr)
        havePrintedFilename = True

def perror(s):
    global hitError
    hitError = True
    print_filename_once()
    print(' ' + redden(s), file=sys.stderr)

def pwarning(s):
    print_filename_once()
    print(' ' + enyellow(s), file=sys.stderr)


KnownFederations = {
    "365Strong", # 365 Strong Powerlifting Federation.
    "AAPF", # Amateur APF (drug-tested).
    "AAU", # Amateur Athletic Union.
    "ADFPA", # American Drug-Free Powerlifting Association, precursor to USAPL.
    "APA",
    "APC", # American Powerlifting Committee.
    "APF",
    "AsianPF", # Asian Powerlifting Federation, IPF.
    "BB", # Bogatyr Brotherhood, a stand-alone and short-lived Russian federation.
    "BPU", # British Powerlifting Union.
    "BP", # British Powerlifting, IPF. Used to be GBPF.
    "CAPO", # Australian affiliate of the WPC/GPA.
    "CommonwealthPF", # Commonwealth Powerlifting Federation.
    "CPF", # Canadian Powerlifting Federation (USPA/IPL).
    "CPL", # Canadian Powerlifting League.
    "CPU", # Canadian Powerlifting Union.
    "EPA", # English Powerlifting Association, IPF.
    "EPF",
    "FEMEPO", # Federaci√≥n Mexicana de Powerlifting A.C.
    "FESUPO", # Federacion Sudamericana de Powerlifting
    "FFForce", # Federation Francaise de Force, IPF.
    "FPO", # Finland Powerlifting Organization (IPA).
    "GPA",
    "GPC", # Global Powerlifting Committee.
    "GPC-GB", # British branch of the GPC.
    "GPC-AUS", # Australian branch of the GPC.
    "GPC-NZ", # New Zealand branch of the GPC.
    "HERC", # Hercules Gym in Syracuse, NY. Run by Rheta West.
    "IDFPF", # Irish Drug-Free Powerlifting Federation.
    "IPA",
    "IPF",
    "IPL",
    "IrishPF", # Irish Powerlifting Federation (IPF affiliate).
    "MHP", # Maximum Human Performance (a vitamin company).
    "MM", # Metal Militia (a small, independent federation).
    "NAPF", # North American Powerlifting Federation.
    "NASA",
    "NIPF", # Northern Ireland Powerlifting Federation.
    "NPA", # National Powerlifting Association of Israel.
    "NSF", # Norwegian branch of the IPF.
    "NZPF", # New Zealand Powerlifting Federation, IPF.
    "OceaniaPF", # Oceania Powerlifting Federation, IPF.
    "ParaPL", # Para Powerlifting.
    "PA",
    "ProRaw",
    "RAW", # 100% RAW Federation (drug-tested).
    "RAWU", # Raw United Federation
    "RPS",
    "RUPC", # Raw Unity.
    "ScottishPL", # Scottish Powerlifting, IPF.
    "SCT", # Super-Cup of Titans.
    "SPA", #Singapore Powerlifting Alliance
    "SPF",
    "THSPA", # Texas High School, single-ply only, drug-tested.
    "UPA",
    "USAPL",
    "USPF",
    "USPA",
    "WABDL", # World Association of Bench Pressers and Deadlifters.
    "WDFPF", # World Drug Free Powerlifting Association
    "WelshPA", # Welsh Powerlifting Association, IPF.
    "WPC",
    "WNPF", # World Natural Powerlifting Federation.
    "WRPF",
    "WRPF-AUS",
    "WRPF-CAN",
    "WUAP", # World United Amateur Powerlifting.
    "XPC",
}

KnownCountries = {
    "Argentina",
    "Australia",
    "Austria",
    "Belarus",
    "Belgium",
    "Brazil",
    "Britain", # TODO: This is a placeholder until we have more data, probably.
    "Bulgaria",
    "Canada",
    "Cayman Islands",
    "Colombia",
    "Czechia",
    "Czech Republic",
    "Denmark",
    "England",
    "Estonia",
    "Fiji",
    "Finland",
    "France",
    "Germany",
    "Greece",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Ireland",
    "Israel",
    "Italy",
    "Japan",
    "Kazakhstan",
    "Luxembourg",
    "Malaysia",
    "Mexico",
    "Netherlands",
    "New Caledonia",
    "New Zealand",
    "Norway",
    "N.Ireland",
    "Papua New Guinea",
    "Peru",
    "Poland",
    "Puerto Rico",
    "Russia",
    "Samoa",
    "Scotland",
    "Serbia",
    "Singapore",
    "Slovakia",
    "Slovak Republic",
    "South Africa",
    "Spain",
    "Sweden",
    "Tahiti",
    "UK", # Meaning "Somewhere in the UK, but we don't know where."
    "Ukraine",
    "USA",
    "US Virgin Islands",
    "Wales",
}

KnownStates = {
    "Australia": {
        "ACT", "NSW", "NT", "QLD", "SA", "TAS", "VIC", "WA"
    },
    "Brazil": {
        "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT",
        "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO",
        "RR", "SC", "SP", "SE", "TO"
    },
    "Canada": {
        "AB", "BC", "MB", "NB", "NL", "NT", "NS", "NU", "ON", "PE", "QC",
        "SK", "YT"
    },
    "India": {
        "AP", "AR", "AS", "BR", "CG", "GA", "GJ", "HR", "HP", "JK", "JH",
        "KA", "KL", "MP", "MH", "MN", "ML", "MZ", "NL", "OR", "PB", "RJ",
        "SK", "TN", "TR", "UK", "UP", "WB", "AN", "CH", "DH", "DD", "DL",
        "LD", "PY"
    },
    "Mexico": {
        "AG", "BC", "BS", "CM", "CS", "CH", "CO", "CL", "DF", "DG", "GT",
        "GR", "HG", "JA", "EM", "MI", "MO", "NA", "NL", "OA", "PU", "QT",
        "QR", "SL", "SI", "SO", "TB", "TM", "TL", "VE", "YU", "ZA"
    },
    "New Zealand": {
        "NTL", "AKL", "WKO", "BOP", "GIS", "HKB", "TKI", "MWT", "WGN",
        "TAS", "NSN", "MBH", "WTC", "CAN", "OTA", "STL"
    },
    "USA": {
        "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA",
        "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA",
        "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
        "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX",
        "UT", "VT", "VA", "WA", "WV", "WI", "WY"
    },
}


def is_number(s):
    try:
        int(s)
        return True
    except ValueError:
        return False


def check(scriptname, filename):
    # Pretty-printer helper (so we only print the name once).
    reset_filename_state(filename)

    csv = oplcsv.Csv(filename)
    if len(csv.rows) < 1:
        perror("Meet file doesn't have any rows.")
        return
    if len(csv.rows) > 1:
        perror("Meet file has too many rows.")
        return

    # Require fields to be present and in a set order.
    fields = ['Federation', 'Date', 'MeetCountry', 'MeetState', 'MeetTown', 'MeetName']
    if len(fields) != len(csv.fieldnames):
        perror("Incorrect number of fields.")

    for i in range(0, len(fields)):
        if fields[i] != csv.fieldnames[i]:
            perror("Field %u must be %s." % (i, fields[i]))

    row = csv.rows[0]
    if len(row) != len(fields):
        perror("Meet file has incorrect number of columns.")
        return # Exit early -- this error is bad enough.

    fedidx = csv.index('Federation')
    dateidx = csv.index('Date')
    countryidx = csv.index('MeetCountry')
    stateidx = csv.index('MeetState')
    townidx = csv.index('MeetTown')
    nameidx = csv.index('MeetName')

    # Check for whitespace errors.
    for text in row:
        if text.strip() != text:
            perror("Extraneous whitespace for \"%s\"." % text)
        if text.replace('  ', ' ') != text:
            perror("Excessive spacing for \"%s\"." % text)

    # Check the Federation column.
    if not row[fedidx] in KnownFederations:
        perror("Unknown federation (add to check-meet-csv?): \"%s\"" % row[fedidx])

    # Check the Date column.
    date = row[dateidx]
    if len(date) != 10 or date.count('-') != 2:
        perror("Date in wrong format: \"%s\". Must be \"YYYY-MM-DD\"." % date)
    else:
        # The split is valid. Check the individual Date components.
        year,month,day = date.split('-')

        # Make sure the parts are all digits and of the right length.
        if not year.isdigit() or len(year) != 4:
            perror("Year is not a number of length 4: \"%s\"." % year)
        if not month.isdigit() or len(month) != 2:
            perror("Month is not a number of length 2: \"%s\"." % month)
        if not day.isdigit() or len(day) != 2:
            perror("Day is not a number of length 2: \"%s\"." % day)

        # Make sure that the numbers are in a plausible range.
        year_int = int(year)
        month_int = int(month)
        day_int = int(day)

        if year_int < 1945 or year_int > currentYear:
            perror("Implausible year: \"%s\"." % year)
        if month_int > 12:
            perror("Implausible month: \"%s\"." % month)
        if day_int > 31:
            perror("Implausible day: \"%s\"." % day)

    # Check the MeetCountry column.
    if not row[countryidx] in KnownCountries:
        perror("Unknown country (add to check-meet-csv?): \"%s\"" % row[countryidx])

    # Check the optional MeetState column.
    if row[stateidx]:
        if not row[countryidx] in KnownStates or not row[stateidx] in KnownStates[row[countryidx]]:
            perror("Unknown state (add to check-meet-csv?): \"%s\"" % row[stateidx])

    # Check the optional MeetTown column.
    if row[townidx]:
        found_illegal_char = False
        for c in row[townidx]:
            if not c.isalpha() and not c in ' -.\'':
                found_illegal_char = True
                break

        if found_illegal_char:
            perror("Illegal character in: \"%s\"" % row[townidx])

    # Check the MeetName column.
    if not row[nameidx]:
        perror("Meet must have a MeetName.")
    else:
        found_illegal_char = False
        for c in row[nameidx]:
            if not c.isalnum() and not c in ' -.\'/&':
                found_illegal_char = True
                break

        if found_illegal_char:
            perror("Illegal character in: \"%s\"" % row[nameidx])

        # Check for some hints for commonly-confused state abbreviations.
        if 'Maine' in row[nameidx] and row[stateidx] != 'ME':
            perror("The abbreviation for Maine is 'ME', not '%s'." % row[stateidx])
        if 'Missouri' in row[nameidx] and row[stateidx] != 'MO':
            perror("The abbreviation for Missouri is 'MO', not '%s'." % row[stateidx])
        if 'Montana' in row[nameidx] and row[stateidx] != 'MT':
            perror("The abbreviation for Montana is 'MT', not '%s'." % row[stateidx])
        if 'Texas' in row[nameidx] and row[stateidx] != 'TX':
            perror("The abbreviation for Texas is 'TX', not '%s'." % row[stateidx])

if __name__ == '__main__':
    # If arguments are provided, check only those files.
    if len(sys.argv) > 1:
        for f in sys.argv[1:]:
            check(sys.argv[0], f)

    # Otherwise, check every file named meet.csv in the dirtree,
    # which is much faster than using `find -exec`.
    else:
        for dirname, subdirs, files in os.walk(os.getcwd()):
            if 'meet.csv' in files:
                meetpath = dirname + os.sep + 'meet.csv'
                check(sys.argv[0], meetpath)

                if not 'entries.csv' in files:
                    perror('Missing entries.csv')


    if hitError:
        sys.exit(1)
