#!/usr/bin/env python3
# vim: set ts=8 sts=4 et sw=4 tw=99:
#
# Generates a static table of meet information.
#

import bisect
import html
import sys
sys.path.append('../scripts')
import oplcsv
import urllib.parse

LIFTERSCSV = '../build/openpowerlifting.csv'
MEETCSV = '../build/meets.csv'
SOCIALFILE = '../lifter-data/social-media.csv'

# Gets some row that contains the given meetid, using a super ham-fisted binary search.
def findsomelifterin(meetid, lifterscsv):
    meetidx = lifterscsv.index('MeetID')
    rows = lifterscsv.rows

    meetid = int(meetid)

    x = int(len(rows) / 2)
    step = int(len(rows) / 4)
    while int(rows[x][meetidx]) != meetid:
        if int(rows[x][meetidx]) < meetid:
            x = x + step
        else:
            x = x - step

        # In edge cases, just keep stepping by one. It's fast enough.
        step = max(1, int(step / 2))
        
    return x


# Knowing that the lifterscsv rows are in sorted order by MeetID,
# perform a binary search and expand to grab nearby rows.
def getliftersfor(meetid, lifterscsv):
    meetidx = lifterscsv.index('MeetID')

    # Bisect to find one of the lifters.
    x = findsomelifterin(meetid, lifterscsv)

    # The rest of the lifters are above and below that one.
    # Find the lowest and highest indices for lifters in this meet, inclusive.
    lowest = x
    while lowest > 0:
        if lifterscsv.rows[lowest-1][meetidx] != meetid:
            break
        lowest = lowest - 1

    highest = x
    while highest < len(lifterscsv.rows) - 1:
        if lifterscsv.rows[highest+1][meetidx] != meetid:
            break
        highest = highest + 1

    return lifterscsv.rows[lowest : highest + 1]


def getmonth(m):
    if m == '01': return 'January'
    if m == '02': return 'February'
    if m == '03': return 'March'
    if m == '04': return 'April'
    if m == '05': return 'May'
    if m == '06': return 'June'
    if m == '07': return 'July'
    if m == '08': return 'August'
    if m == '09': return 'September'
    if m == '10': return 'October'
    if m == '11': return 'November'
    if m == '12': return 'December'
    return ''


def makemeeturl(meetpath):
    meetpath = urllib.parse.quote(meetpath.encode("utf-8"))
    return u'meet.html?m=%s' % (meetpath)


def makelifterurl(liftername):
    liftername = urllib.parse.quote(liftername.encode("utf-8"))
    return u'lifters.html?q=%s' % (liftername)


SocialMediaCSV = None
def makeinstagram(liftername):
    global SocialMediaCSV
    if not SocialMediaCSV:
        SocialMediaCSV = oplcsv.Csv(SOCIALFILE)

    nameidx = SocialMediaCSV.index('Name')
    igidx = SocialMediaCSV.index('Instagram')

    for row in SocialMediaCSV.rows:
        if row[nameidx] == liftername and row[igidx]:
            return '<a href="https://instagram.com/%s" class="instagram"><i class="fa fa-instagram"></i></a>' % (row[igidx])

    return ''


def main():
    csv = oplcsv.Csv(MEETCSV)

    meetidx = csv.index('MeetID')
    fedidx = csv.index('Federation')
    dateidx = csv.index('Date')
    countryidx = csv.index('MeetCountry')
    stateidx = csv.index('MeetState')
    townidx = csv.index('MeetTown')
    meetnameidx = csv.index('MeetName')
    meetpathidx = csv.index('MeetPath')

    # Order the meetcsv in the order of intended appearance.
    def sorter(x):
        # First, sort by date. Negate for higher dates first.
        date = -int(x[dateidx].replace('-',''))
        # Within a date, sort by federation.
        fed = x[fedidx]
        # Within a federation, sort by meet name.
        name = x[meetnameidx]
        # After all this, sort by location, for the benefit of Norway.
        loc = str(x[countryidx]) + str(x[stateidx]) + str(x[townidx])
        return (date, fed, name, loc)

    csv.rows = sorted(csv.rows, key=sorter)

    lifters = oplcsv.Csv(LIFTERSCSV)
    liftersmeetidx = lifters.index('MeetID')
    lifterswilksidx = lifters.index('Wilks')
    liftersnameidx = lifters.index('Name')
    lifterseqidx = lifters.index('Equipment')

    columns = ["Federation", "Date", "Location", "Name", "Lifters",
               "Best Raw Lifter", "Raw Wilks", "Best Geared Lifter", "Geared Wilks"]

    print('<table id="meettable">')

    print('<thead><tr class="alwaysShow">')
    for c in columns:
        print('<td>%s</td>' % c)
    print('</tr></thead>')

    print('<tbody>')
    lastmonth = ''

    for rowidx,row in enumerate(csv.rows):
        # How many lifters competed?
        results = getliftersfor(row[meetidx], lifters)
        results = sorted(results, key=lambda x : float(x[lifterswilksidx] or 0.0), reverse=True)

        rawlifters = list(filter(lambda x : x[lifterseqidx] == 'Raw' or
                                       x[lifterseqidx] == 'Wraps',
                                 results))
        gearedlifters = list(filter(lambda x : x[lifterseqidx] == 'Single-ply' or
                                          x[lifterseqidx] == 'Multi-ply',
                                    results))

        # Lifters who entered multiple events should only count once.
        names = []
        for k in results:
            if not k[liftersnameidx] in names:
                names.append(k[liftersnameidx])

        location = row[countryidx]
        if row[stateidx]:
            location = "%s-%s" % (row[countryidx], row[stateidx])

        # Only show best lifter if there was one, and they didn't bomb out.
        if len(rawlifters) > 0 and rawlifters[0][lifterswilksidx]:
            bestrawlifter = rawlifters[0][liftersnameidx]
            bestrawwilks = rawlifters[0][lifterswilksidx]
            rawlifterhtml = '<a href="%s">%s</a>%s' % (makelifterurl(bestrawlifter), \
                    bestrawlifter, makeinstagram(bestrawlifter))
        else:
            bestrawlifter = ''
            bestrawwilks = ''
            rawlifterhtml = ''

        if len(gearedlifters) > 0 and gearedlifters[0][lifterswilksidx]:
            bestgearedlifter = gearedlifters[0][liftersnameidx]
            bestgearedwilks = gearedlifters[0][lifterswilksidx]
            gearedlifterhtml = '<a href="%s">%s</a>%s' % \
                    (makelifterurl(bestgearedlifter), bestgearedlifter, \
                     makeinstagram(bestgearedlifter))
        else:
            bestgearedlifter = ''
            bestgearedwilks = ''
            gearedlifterhtml = ''

        # If the month changed, emit a header row.
        date = row[dateidx]
        yrm = date[0:date.rindex('-')]
        # Don't emit the first divider since it looks weird cutting off the headers.
        if lastmonth != '' and lastmonth != yrm:
            # These rows should show if the federation selector is active and they have content.
            # Accumulate a list of federations in this month.
            fedlist = []
            for i in range(rowidx, len(csv.rows)):
                date2 = csv.rows[i][dateidx]
                yrm2 = date2[0:date2.rindex('-')]
                if yrm2 != yrm:
                    break
                if not csv.rows[i][fedidx] in fedlist:
                    fedlist.append(csv.rows[i][fedidx])
            
            [year,month] = yrm.split('-')
            print('<tr class="%s"><td colspan="%d" class="table-divider">%s %s</td></tr>'
                   % ('_' + (' _'.join(fedlist)), len(columns), getmonth(month), year))
            lastmonth = yrm
        lastmonth = yrm

        meeturl = makemeeturl(row[meetpathidx]);

        print('<tr class="%s">' % ('_' + row[fedidx]))
        print('<td>%s</td>' % row[fedidx])
        print('<td><a href="%s">%s</a></td>' % (meeturl, date))
        print('<td>%s</td>' % location)
        print('<td class="meetname"><a href="%s">%s</a></td>' % (meeturl, row[meetnameidx]))
        print('<td>%d</td>' % len(names))
        print('<td>%s</td>' % rawlifterhtml)
        print('<td>%s</td>' % bestrawwilks)
        print('<td>%s</td>' % gearedlifterhtml)
        print('<td>%s</td>' % bestgearedwilks)
        print('</tr>')

    print('</tbody>')
    print('</table>')


if __name__ == '__main__':
    main()
